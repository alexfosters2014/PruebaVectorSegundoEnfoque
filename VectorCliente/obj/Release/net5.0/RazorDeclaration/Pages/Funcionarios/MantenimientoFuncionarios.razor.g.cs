// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace VectorCliente.Pages.Funcionarios
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Alex\Source\Repos\alexfosters2014\PruebaVectorSegundoEnfoque\VectorCliente\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Alex\Source\Repos\alexfosters2014\PruebaVectorSegundoEnfoque\VectorCliente\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Alex\Source\Repos\alexfosters2014\PruebaVectorSegundoEnfoque\VectorCliente\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Alex\Source\Repos\alexfosters2014\PruebaVectorSegundoEnfoque\VectorCliente\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Alex\Source\Repos\alexfosters2014\PruebaVectorSegundoEnfoque\VectorCliente\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Alex\Source\Repos\alexfosters2014\PruebaVectorSegundoEnfoque\VectorCliente\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Alex\Source\Repos\alexfosters2014\PruebaVectorSegundoEnfoque\VectorCliente\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Alex\Source\Repos\alexfosters2014\PruebaVectorSegundoEnfoque\VectorCliente\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Alex\Source\Repos\alexfosters2014\PruebaVectorSegundoEnfoque\VectorCliente\_Imports.razor"
using VectorCliente;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Alex\Source\Repos\alexfosters2014\PruebaVectorSegundoEnfoque\VectorCliente\_Imports.razor"
using VectorCliente.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\Alex\Source\Repos\alexfosters2014\PruebaVectorSegundoEnfoque\VectorCliente\_Imports.razor"
using Syncfusion.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\Alex\Source\Repos\alexfosters2014\PruebaVectorSegundoEnfoque\VectorCliente\_Imports.razor"
using Syncfusion.Blazor.Buttons;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\Alex\Source\Repos\alexfosters2014\PruebaVectorSegundoEnfoque\VectorCliente\_Imports.razor"
using Blazored.LocalStorage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\Alex\Source\Repos\alexfosters2014\PruebaVectorSegundoEnfoque\VectorCliente\_Imports.razor"
using Blazored.SessionStorage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "C:\Users\Alex\Source\Repos\alexfosters2014\PruebaVectorSegundoEnfoque\VectorCliente\_Imports.razor"
using Comun;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "C:\Users\Alex\Source\Repos\alexfosters2014\PruebaVectorSegundoEnfoque\VectorCliente\_Imports.razor"
using Modelo;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "C:\Users\Alex\Source\Repos\alexfosters2014\PruebaVectorSegundoEnfoque\VectorCliente\_Imports.razor"
using Modelo.ViewModels;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "C:\Users\Alex\Source\Repos\alexfosters2014\PruebaVectorSegundoEnfoque\VectorCliente\_Imports.razor"
using Modelo.OtherModels;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "C:\Users\Alex\Source\Repos\alexfosters2014\PruebaVectorSegundoEnfoque\VectorCliente\_Imports.razor"
using VectorCliente.Helpers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "C:\Users\Alex\Source\Repos\alexfosters2014\PruebaVectorSegundoEnfoque\VectorCliente\_Imports.razor"
using VectorCliente.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "C:\Users\Alex\Source\Repos\alexfosters2014\PruebaVectorSegundoEnfoque\VectorCliente\_Imports.razor"
using VectorCliente.Services.IServices;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "C:\Users\Alex\Source\Repos\alexfosters2014\PruebaVectorSegundoEnfoque\VectorCliente\_Imports.razor"
using Blazored.Toast;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "C:\Users\Alex\Source\Repos\alexfosters2014\PruebaVectorSegundoEnfoque\VectorCliente\_Imports.razor"
using Blazored.Toast.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "C:\Users\Alex\Source\Repos\alexfosters2014\PruebaVectorSegundoEnfoque\VectorCliente\_Imports.razor"
using VectorCliente.Shared.Componentes;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "C:\Users\Alex\Source\Repos\alexfosters2014\PruebaVectorSegundoEnfoque\VectorCliente\_Imports.razor"
using VectorCliente.Shared.Componentes.Escalafon;

#line default
#line hidden
#nullable disable
#nullable restore
#line 26 "C:\Users\Alex\Source\Repos\alexfosters2014\PruebaVectorSegundoEnfoque\VectorCliente\_Imports.razor"
using VectorCliente.Shared.Widget;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "C:\Users\Alex\Source\Repos\alexfosters2014\PruebaVectorSegundoEnfoque\VectorCliente\_Imports.razor"
using Syncfusion.Blazor.Popups;

#line default
#line hidden
#nullable disable
#nullable restore
#line 28 "C:\Users\Alex\Source\Repos\alexfosters2014\PruebaVectorSegundoEnfoque\VectorCliente\_Imports.razor"
using VectorCliente.Shared.Componentes.Escalafon.Modal;

#line default
#line hidden
#nullable disable
#nullable restore
#line 29 "C:\Users\Alex\Source\Repos\alexfosters2014\PruebaVectorSegundoEnfoque\VectorCliente\_Imports.razor"
using VectorCliente.Shared.Componentes.Escalafon.Planificacion;

#line default
#line hidden
#nullable disable
#nullable restore
#line 30 "C:\Users\Alex\Source\Repos\alexfosters2014\PruebaVectorSegundoEnfoque\VectorCliente\_Imports.razor"
using VectorCliente.Shared.Componentes.Funcionarios;

#line default
#line hidden
#nullable disable
#nullable restore
#line 31 "C:\Users\Alex\Source\Repos\alexfosters2014\PruebaVectorSegundoEnfoque\VectorCliente\_Imports.razor"
using BlazorAnimate;

#line default
#line hidden
#nullable disable
#nullable restore
#line 32 "C:\Users\Alex\Source\Repos\alexfosters2014\PruebaVectorSegundoEnfoque\VectorCliente\_Imports.razor"
using Microsoft.AspNetCore.SignalR.Client;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/Funcionarios")]
    public partial class MantenimientoFuncionarios : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 356 "C:\Users\Alex\Source\Repos\alexfosters2014\PruebaVectorSegundoEnfoque\VectorCliente\Pages\Funcionarios\MantenimientoFuncionarios.razor"
       
    private UsuarioDTO usuarioLogueado;
    private ModelFunContratosMop modelotcMOP;
    private List<FuncionarioDTO> funcionariosDTO;
    private FuncionarioDTO funcionario = new FuncionarioDTO();
    private bool aparecer = false;
    private int IdContrato = 0;
    private int IdMesaOp = 0;
    private FiltroBusquedaFuncionario filtro;
    private string tituloBoton;
    private int IdRubroSeleccionado = 0;
    private string imagenReingreso = "duplicado.png";
    private bool nuevoFuncionario = true;

    private bool visibilidadRubro = false;
    private bool visibilidadBaja = false;
    private bool visibilidadLoading = false;
    private ModelBajaFuncionario modelBaja = new();

    protected async override Task OnInitializedAsync()
    {
        try
        {
            usuarioLogueado = await localStorage.GetItemAsync<UsuarioDTO>(SD.LocalUsuario);
            if (usuarioLogueado == null)
            {
                nav.NavigateTo("/", true);
                return;
            }
            filtro = new FiltroBusquedaFuncionario();
            modelotcMOP = await serviceFuncionario.ObtenerTipoContratosMOP(usuarioLogueado.Token);
            filtro.Activo = true;
            filtro.Rubro = "*";

            var itemFuncionario = await localStorage.GetItemAsync<FuncionarioDTO>(SD.LocalFuncionario);
            if (itemFuncionario != null)
            {
                funcionario = itemFuncionario;
                aparecer = true;
                tituloBoton = "Agregar";
                await localStorage.RemoveItemAsync(SD.LocalFuncionario);
            }
        }
        catch (Exception ex)
        {
            await js.MsgError(ex.Message);
        }
    }

    private async Task Buscar()
    {
        if (string.IsNullOrEmpty(filtro.Busqueda))
        {
            await js.MsgAdvertencia("No puede contener campos vacios");
            return;
        }

        try
        {
            visibilidadLoading = true;
            funcionariosDTO = await serviceFuncionario.ObtenerFiltro(filtro, usuarioLogueado.Token);
            visibilidadLoading = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            visibilidadLoading = false;
            await js.MsgError(ex.Message);
        }
    }

    private async Task VerEditar(int id)
    {
        try
        {
            funcionario = funcionariosDTO.Single(w => w.Id == id);
            IdContrato = funcionario.TipoContrato.Id;
            IdMesaOp = funcionario.RespondeA.Id;
            IdRubroSeleccionado = funcionario.Rubro.Id;
            nuevoFuncionario = false;
            aparecer = true;
            tituloBoton = "Actualizar";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await js.MsgError(ex.Message);
        }
    }

    private async Task BajaDefinitiva(ModelBajaFuncionario modelBaja)
    {
        try
        {
            bool baja = await serviceFuncionario.Eliminar(modelBaja, usuarioLogueado.Token);
            await js.MsgExitoso("Se ha dado de baja al funcionario seleccionado");
            await Buscar();
            visibilidadBaja = false;
        }
        catch (Exception ex)
        {
            await js.MsgError(ex.Message);
        }
    }

    private void NuevoFuncionario()
    {
        imagenReingreso = "duplicado.png";
        funcionario = new FuncionarioDTO();
        funcionario.Id = 0;
        funcionario.EstadoActividad = SD.EstadoFuncionarioEnum.ACTIVO.ToString();
        tituloBoton = "Agregar";
        nuevoFuncionario = true;
        aparecer = true;
        IdContrato = 0;
        IdMesaOp = 0;
        IdRubroSeleccionado = 0;
        StateHasChanged();
    }

    private async Task NuevoActualizarFuncionario()
    {
        try
        {
            if (IdContrato == 0)
            {
                await js.MsgAdvertencia("Debe seleccionar un contrato de trabajo");
                return;
            }
            if (IdMesaOp == 0)
            {
                await js.MsgAdvertencia("Debe seleccionar una mesa operativa");
                return;
            }
            if (funcionario.DepartamentoOperativo == null || funcionario.DepartamentoOperativo == "ninguno")
            {
                await js.MsgAdvertencia("Debe seleccionar un departamento");
                return;
            }
            if (IdRubroSeleccionado == 0)
            {
                await js.MsgAdvertencia("Debe seleccionar un rubro");
                return;
            }
             if (funcionario.TipoResumido == "0")
            {
                await js.MsgAdvertencia("Debe seleccionar un un tipo resumido");
                return;
            }
            funcionario.Rubro = modelotcMOP.Rubros.Find(f => f.Id == IdRubroSeleccionado);
            funcionario.RespondeA = modelotcMOP.MesasOperativas.Find(f => f.Id == IdMesaOp);
            funcionario.TipoContrato = modelotcMOP.TiposContratos.Find(f => f.Id == IdContrato);
            funcionario.Nombres = funcionario.Nombres.ToUpper();
            funcionario.Apellidos = funcionario.Apellidos.ToUpper();
            funcionario.UltimaActualizacion = DateTime.Now.ToString("dd/MM/yyyy HH:mm") + " - " + usuarioLogueado.NombreUsuario;

            if (nuevoFuncionario)
            {
                funcionario = await serviceFuncionario.Agregar(funcionario, usuarioLogueado.Token);
            }
            else
            {
                funcionario = await serviceFuncionario.Actualizar(funcionario, usuarioLogueado.Token);
            }
            aparecer = false;
            await js.MsgExitoso("Registrado exitosamente");
            funcionario = new FuncionarioDTO();
            StateHasChanged();
            //nav.NavigateTo("/Funcionarios", true);
        }
        catch (Exception ex)
        {
            await js.MsgError(ex.Message);
        }

    }
    private void ActvarModalRubro()
    {
        visibilidadRubro = true;
    }

    private void ActvarModalBaja(int idFun, string funcionarioDetalle)
    {
        modelBaja.Id = idFun;
        modelBaja.FechaBaja = DateTime.Today.Date.AddDays(-1);
        modelBaja.Funcionario = funcionarioDetalle;
        visibilidadBaja = true;
    }

    private async Task NuevoRubro(RubroDTO nuevoRurboDTO)
    {
        try
        {
            if (nuevoRurboDTO == null)
            {
                await js.MsgAdvertencia("No hay valores ha ingresar");
                return;
            }
            if (RubroDTO.Validar(nuevoRurboDTO))
            {
                var rubroAgregado = await serviceRubro.AgregarNuevo(nuevoRurboDTO, usuarioLogueado.Token);
                if (rubroAgregado != null)
                {
                    modelotcMOP.Rubros.Add(rubroAgregado);
                    await js.MsgExitoso("Se ha registrado un nuevo rubro");
                    visibilidadRubro = false;
                }
                else
                {
                    await js.MsgAdvertencia("No se pudo agregar el rubro");
                    return;
                }
            }
            else
            {
                await js.MsgAdvertencia("Los campos no pueden estar vacios");
                return;
            }
        }
        catch (Exception ex)
        {
            await js.MsgError(ex.Message);
        }
    }

    private async Task NuevoTipoContrato()
    {
        await localStorage.SetItemAsync(SD.LocalFuncionario, funcionario);
        nav.NavigateTo("/TipoContrato/Nuevo");
    }

    private void Cancelar()
    {
        aparecer = false;
        funcionario = new FuncionarioDTO();
        StateHasChanged();
    }

    private void HiddenModal()
    {
        visibilidadRubro = false;
        visibilidadBaja = false;
    }
    private async Task ComprobarDuplicado()
    {
        if (imagenReingreso != "duplicado.png")
        {
            return;
        }
        if (string.IsNullOrEmpty(funcionario.Cedula))
        {
            toastService.ShowWarning("No puede dejar el campo vacio");
            return;
        }
        if (funcionario.Cedula.Length != 8)
        {
            toastService.ShowWarning("La cedula no tiene formato correcto");
            return;
        }

        string documento = funcionario.Cedula.Substring(0, funcionario.Cedula.Length - 1);
        string digitoVerificador = funcionario.Cedula.Substring(funcionario.Cedula.Length - 1, 1);

        char[] digitos = documento.ToCharArray();

        int sumaDigitos = 2 * ToInt(digitos[0].ToString()) + 9 * ToInt(digitos[1].ToString()) + 8 * ToInt(digitos[2].ToString())
        + 7 * ToInt(digitos[3].ToString()) + 6 * ToInt(digitos[4].ToString()) + 3 * ToInt(digitos[5].ToString()) +
        4 * ToInt(digitos[6].ToString());

        int mod = sumaDigitos % 10;
        int resultadoaVerificar = (10 - mod) % 10;


        if (ToInt(digitoVerificador) == resultadoaVerificar)
        {
            imagenReingreso = "loading.gif";
            GeneralTransport datoDuplicado = new()
            {
                Data = funcionario.Cedula
            };
            bool esReingreso = await serviceFuncionario.FuncionarioDuplicado(datoDuplicado, usuarioLogueado.Token);
            if (esReingreso)
            {
                toastService.ShowInfo("El funcinoario que quiere ingresar es reingreso");
            }
            imagenReingreso = esReingreso ? "esDuplicado.png" : "ok.png";
        }

    }
    private int ToInt(string value)
    {
        return SD.ConvertStringToInt(value);
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IServiceRubro serviceRubro { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IServiceFuncionario serviceFuncionario { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IToastService toastService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime js { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager nav { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ILocalStorageService localStorage { get; set; }
    }
}
#pragma warning restore 1591
