@page "/Index"
@using System.IO
@using Tewr.Blazor.FileReader
@inject IFileReaderService fileReader
@inject ILocalStorageService localStorage
@inject NavigationManager nav
@inject ServiceImportar serviceImport
@inject IServiceFuncionario serviceFuncionario
@inject IToastService toastService;


@if (usuarioDTO != null)
{
    <h1>Hello, @usuarioDTO.NombreUsuario  </h1>

    <h3>Bienvenido a Vector 1.0</h3>
    <h5>Cantidad de Funcionarios activos : @cantidadFuncionariosActivos</h5>

    <div class="form-group mr-3">
        <label class="inputFile" for="import">Importar Funcionarios<img src="/icons/upload.png" class="imgUpload" /></label>
        <input type="file" accept=".xlsx" @ref="refExcel" @onchange="ImportarFuncionarioExcel" id="import" name="import" />
    </div>

    <div class="form-group">
        <label class="inputFile" for="importServCli">Importar Clientes y servicios<img src="/icons/upload.png" class="imgUpload" /></label>
        <input type="file" accept=".xlsx" @ref="refExcelCliServ" @onchange="ImportarCliServExcel" id="importServCli" name="importServCli" />
    </div>

    
    <Loading Visibilidad="visible" />
}
@code{

    private UsuarioDTO usuarioDTO = null;
    private bool visible = false;
    private int cantidadFuncionariosActivos = 0;

    ElementReference refExcel;
    ElementReference refExcelCliServ;

    protected async override Task OnInitializedAsync()
    {
        usuarioDTO = await localStorage.GetItemAsync<UsuarioDTO>(SD.LocalUsuario);
        if (usuarioDTO == null)
        {
            nav.NavigateTo("/", true);
        }
        cantidadFuncionariosActivos = await serviceFuncionario.CantidadActivos(usuarioDTO.Token);
    }

    private async Task ImportarFuncionarioExcel()
    {
        try
        {
            visible = !visible;
            var file = (await fileReader.CreateReference(refExcel).EnumerateFilesAsync()).FirstOrDefault();
            if (file == null)
            {
                toastService.ShowInfo("No ha seleccionado ningun archivo");
                return;
            }
            var fileInfo = await file.ReadFileInfoAsync();
            Stream fileStream = null;

            using (var ms = await file.CreateMemoryStreamAsync((int)fileInfo.Size))
            {
                fileStream = new MemoryStream(ms.ToArray());
            }
            bool isImportados = await serviceImport.ImportarFuncionariosDesdeExcel(fileStream, usuarioDTO.Token);
            if (isImportados)
            {
                visible = !visible;
                toastService.ShowSuccess("Datos importados con éxito");
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError("No se han podido importar los datos deseados");
            visible = !visible;
        }
    }

    private async Task ImportarCliServExcel()
    {
        try
        {
            visible = !visible;
            FuncionarioDTO funcionarioImport = new();
            var file = (await fileReader.CreateReference(refExcelCliServ).EnumerateFilesAsync()).FirstOrDefault();
            if (file == null)
            {
                toastService.ShowInfo("No ha seleccionado ningun archivo");
                return;
            }
            var fileInfo = await file.ReadFileInfoAsync();
            Stream fileStream = null;

            using (var ms = await file.CreateMemoryStreamAsync((int)fileInfo.Size))
            {
                fileStream = new MemoryStream(ms.ToArray());
            }
            bool isImportados = await serviceImport.ImportarClientesYServiciosDesdeExcel(fileStream, usuarioDTO.Token);
            if (isImportados)
            {
                visible = !visible;
                toastService.ShowSuccess("Datos importados con éxito");
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError("No se han podido importar todos los servicios");
            visible = !visible;
        }
    }

}
