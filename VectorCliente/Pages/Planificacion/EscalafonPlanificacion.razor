@page "/Planificacion/Escalafon"
@using Syncfusion.Blazor.Navigations
@inject ILocalStorageService localStorage
@inject ISessionStorageService sessionStorage
@inject NavigationManager nav
@inject IJSRuntime js
@inject ServiceEscalafon serviceEscalafon
@inject IServicePrefFunServicio servicePrefFunServicio
@inject HubConnection hubConnection

<PreferenciaFuncionariosServicio CerrarModal="CerrarModal"
                                 PrefServicioFuncionarioDTO="preferenciasFuncEnServicio"
                                 ServicioDTO="ServicioPref"
                                 Visibilidad="VisibilidadPrefFunServ" />

<SfTab CssClass="tab_content e-fill" 
       EnablePersistence="true" @bind-SelectedItem="tabSeleccionado">
    <TabEvents Selecting="Select"> 
    </TabEvents>
    <TabItems>
        <TabItem>
            <ChildContent>
                <TabHeader Text="Planificación"></TabHeader>
            </ChildContent>

            <ContentTemplate>
                
                <div class="d-flex justify-content-between">
                    <h6>Escalafon @(TituloFecha())</h6>
                    <div class="d-flex justify-content-center">
                        <button class="btn btn-primary ml-1 mr-1">Enviar a Operativa</button>
                        <a href="/GanttAusencias" class="btn btn-primary ml-1 mr-1" target="_blank">Visor Ausencias</a>
                    </div>
                    <button type="button" class="btn btn-link" @onclick="Cerrar">Cerrar</button>
                </div>
                <Divider Altura="5px" />

                @if (serviceEscalafon.EscalafonModel != null)
                {
                    <section class="d-flex">
                        @if (serviceEscalafon.EscalafonModel.ClientesDTO != null)
                        {

                            @*<select @bind="clienteSeleccionado" class="btn btn-outline-secondary dropdown-toggle" id="inputGroupSelect04">*@
                            <select @bind="serviceEscalafon.filtroEscalafon.FiltroIdCliente" class="custom-select mr-2" id="inputGroupSelect04">
                                <option value="0" selected>Todos los clientes</option>
                                @foreach (var cliente in serviceEscalafon.EscalafonModel.ClientesDTO)
                                {
                                    @if (cliente.Id != serviceEscalafon.filtroEscalafon.FiltroIdCliente)
                                    {
                                        <option value="@cliente.Id">@cliente.RazonSocial (@cliente.NombreFantasia)</option>
                                    }
                                    else
                                    {
                                        <option value="@cliente.Id" selected>@cliente.RazonSocial (@cliente.NombreFantasia)</option>
                                    }

                                }
                            </select>
                        }
                        <div class="input-group ml-2 mr-2">
                            <div class="input-group-prepend">
                                <span class="input-group-text" id="inputGroup-sizing-default">Servicio</span>
                            </div>
                            <input type="text" class="form-control" aria-label="Default" aria-describedby="inputGroup-sizing-default"
                                   @bind="serviceEscalafon.filtroEscalafon.FiltroNombreServicio">
                        </div>

                        <button class="btn btn-primary ml-2 mb-0 mt-0" @onclick="FiltrarServicios">Filtrar</button>
                    </section>

                    <Divider Altura="5px" />
                    <article class="scrolVertical text-center align-items-center" style="height:78vh">
                        <table>
                            @foreach (var estado in serviceEscalafon.EscalafonFiltrado)
                            {
                                if (EsServicioDiferente(estado.Servicio.Id))
                                {
                                    <tr>
                                        <td colspan="30"> <h6 class="estiloTituloServicio">@estado.Servicio.NombreDescriptivo (@estado.Servicio.Direccion)
                                                <a href="" @onclick:preventDefault><IconEdit Icon="preferenciaFunServicio" Titulo="Ver Preferencias Funcionario en servicio"/></a>
                                                <a href="" @onclick:preventDefault><IconEdit Icon="HistoricoServicio" Titulo="Ver Historico de Servicio"/></a>
                                            </h6>
                                        </td>

                                    </tr>
                                }
                                if (EsTurnoDiferente(estado.Turno))
                                {
                                    <tr>
                                        <td colspan="30">
                                            <p class="estiloTituloTurno"> @SD.TurnosDiccionario[estado.Turno]</p>
                                        </td>
                                    </tr>
                                }





          <tr >
          @* <tr @ondblclick="Edicion">*@
                <td title="Tipo Funcionario : @estado.TipoFuncionarioOperativo" style="width:2.5%">
                    <img src="iconosPuesto/@ImagenTipoFunOperativo(estado.TipoFuncionarioOperativo)" class="imgEstado" />
                </td>
                <td title="Comienzo de jornada" style="width:2%">
                    <img src="iconosPuesto/iconEstados/@ImagenComienzoJornada(estado.ComienzoJornada)" class="imgEstadoIndicador" />
                </td>
                <td title="Estado Funcionario Operativo" style="width:7%">
                    <div style="padding:1px 3px;border-radius:3px;background-color:@(ColorEstado(estado.Computo.NombreDescriptivo))">
                        @estado.Computo.NombreDescriptivo
                    </div>
                </td>
                <td title="Nro. Funcionario Operativo" style="width:4%" align="center">@estado.FuncionarioOperativo.Numero</td>
                <td title="Nombre Funcionario Operativo: @estado.FuncionarioOperativo.ToString()" style="width:12%" align="left">
                    <ImgRotativo TipoResumido="@estado.TipoResumido"/>
                    @estado.FuncionarioOperativo.NombreCorto()
                </td>
                <td title="Teléfono Funcionario Operativo - Direccion: @estado.FuncionarioOperativo.Direccion" 
                style="width:8%" align="center">@estado.FuncionarioOperativo.Celular</td>

                <td title="Hora Entrada" style="width:4%" align="center">@estado.HoraEntrada.ToString("HH:mm")
                   <HorarioDiaSiguiente Horario="@estado.HoraEntrada" />
                </td>
                <td title="Hora Salida" style="width:4%" align="center">@estado.HoraSalida.ToString("HH:mm")
                    <HorarioDiaSiguiente Horario="@estado.HoraSalida" />
                </td>
                    </tr>

                            }

                        </table>

                    </article>
                }


            </ContentTemplate>


        </TabItem>

        <TabItem> 
            <ChildContent>
                <TabHeader Text="Bolsa"></TabHeader>
            </ChildContent>

            <ContentTemplate>
               <PlanificacionBolsa bolsaRotativos="serviceEscalafon.BolsaEstados"/>
            </ContentTemplate>
</TabItem>

    </TabItems>
</SfTab>

@code {

    private UsuarioDTO usuario;

    private int clienteSeleccionado = 0;
    private int servicioSeleccionado = 0;
    private int tabSeleccionado = 0;
    private ServicioDTO ServicioPref = new();

    List<PreferenciaFuncionarioServicioDTO> preferenciasFuncEnServicio = new();
    private bool VisibilidadPrefFunServ = false;
    protected async override Task OnInitializedAsync()
    {
        usuario = await localStorage.GetItemAsync<UsuarioDTO>(SD.LocalUsuario);
        if (usuario == null)
        {
            nav.NavigateTo("/", true);
            return;
        }
        if (serviceEscalafon.EscalafonModel == null)
        {
            nav.NavigateTo("/Planificacion/Index");
        }
        serviceEscalafon.IdMesaOperativaEnPlanificacion = usuario.MesaOperativa.Id;


        hubConnection.On<PlanificacionDiariaDTO>("RecibirEstado", async (estado) =>
        {
            if (estado.IdMesaOperativa == serviceEscalafon.IdMesaOperativaEnPlanificacion &&
       estado.Fecha.Date == serviceEscalafon.FechaPlanificacion &&
        !string.IsNullOrEmpty(estado.ModalidadActualizacionEscalafon))
            {
            //await serviceEscalafon.AgregarActualizarEliminarEscalafonFrontEnd(estado);

            await serviceEscalafon.ABMEscalafonBolsaFrontEnd(estado);
            // await FiltrarServicios();
            StateHasChanged();

            }
        });    


        hubConnection.On<PlanificacionDiariaDTO>("RecibirEstadoSoloBolsa", async (estado) =>
     {
         if (estado.Rotativo && estado.IdMesaOperativa == serviceEscalafon.IdMesaOperativaEnPlanificacion &&
           estado.Fecha.Date == serviceEscalafon.FechaPlanificacion)
         {
             await serviceEscalafon.ABMBolsaFrontEnd(estado);
             StateHasChanged();
         }

     });

        hubConnection.On<PlanificacionDiariaDTO,ServicioDTO>("RecibirMoverDeServicio", async (estado, servicioAnterior) =>
                {
                    if (estado.IdMesaOperativa == serviceEscalafon.IdMesaOperativaEnPlanificacion &&
               estado.Fecha.Date == serviceEscalafon.FechaPlanificacion &&
                !string.IsNullOrEmpty(estado.ModalidadActualizacionEscalafon))
                    {
                        await serviceEscalafon.ABMEscalafonBolsaFrontEnd(estado);
                        await serviceEscalafon.MoverAOtroServicioPlanDiarioFrontEnd(estado, servicioAnterior);
                        StateHasChanged();
                    }
                });  

    }
    private string ColorEstado(string estado)
    {
        return SD.EstadosComputosColor[estado];
    }
    private string TituloFecha() => ($"{SD.DiaDeSemana[(int)serviceEscalafon.FechaPlanificacion.DayOfWeek]}, {serviceEscalafon.FechaPlanificacion.ToString("dd/MM/yyyy")}");

    private void Cerrar()
    {
        nav.NavigateTo("/Planificacion/Index",true);
    }

    private async Task FiltrarServicios()
    {
        await serviceEscalafon.ReestructuraEscalafonFiltrado();
    }

    private async Task Visor()
    {
        nav.NavigateTo("GanttAusencias");
    }

    public void Select(SelectingEventArgs args)
    {
        if(args.IsSwiped)
        {
            args.Cancel = true;
        }
    }

    private async Task VerPrefFuncionarioServicio(ServicioDTO servicio)
    {
        ServicioPref = servicio;
        preferenciasFuncEnServicio = await servicePrefFunServicio.Obtener(servicio.Id, serviceEscalafon.UsuarioDTO.Token);
        VisibilidadPrefFunServ = true;
    }

    private async Task CerrarModal()
    {
        VisibilidadPrefFunServ = false;
        preferenciasFuncEnServicio = new();
    }
    //public void OnTabSeleccionado(SelectEventArgs args) 
    //{
    //    if (tabSeleccionado == 1)
    //    {
    //        StateHasChanged();
    //    }
    //} 

    private string Estado = SD.EditEnum.LISTA.ToString();

    private bool visibilidadFunOperativoCL = false;
    private bool visibilidadNombrePuesto = false;
    private bool visibilidadFechasInicioFin = false;
    private bool visibilidadTipo = false;
    private bool visibilidadOpciones = false;

    public int idEstado = 0;

    private OpcionesExtendidasEstado opcionesExtendidas = new();
    private int servicioIdAnterior = -1;
    private int turnoAnterior = -1;


    private string CssParaSegundoNivel(bool seguNivel) => seguNivel ? "BordeSegundoNivel" : "";

    private string DatoFuncionarioCubreLibre(FuncionarioDTO func) => (func != null ? $"{func.Numero} - {func.NombreCorto()}" : "---");

    private string FacturableIcono(bool dato) => dato ? "facturable.png" : "noFacturable.png";

    private string RecorteObservaciones(string obs)
    {
        string recorteObs;

        if (string.IsNullOrEmpty(obs))
        {
            recorteObs = "---";
        }
        else
        {
            if (obs.Length < 31)
            {
                recorteObs = obs;
            }
            else
            {
                recorteObs = $"{obs.Substring(0, 27)}...";
            }
        }
        return recorteObs;
    }

    private string ImagenTipoFunOperativo(string tipo) => tipo != null ? SD.TipoFuncionarioOperativo[tipo] : null;

    private string ImagenComienzoJornada(bool comienzoJornada) => comienzoJornada ? "comienzoJornada.png" : "vacio.png";


    private async Task CambiarFuncionarioCubreLibre()
    {
        visibilidadFunOperativoCL = true;
    }
    private async Task CambiarNombrePuesto()
    {
        visibilidadNombrePuesto = true;
    }
    private async Task CambiarTipoFuncionario()
    {
        visibilidadTipo = true;
    }

    private bool EsServicioDiferente(int servicioIdActual)
    {
        bool resultado = servicioIdAnterior != servicioIdActual;
        servicioIdAnterior = resultado ? servicioIdActual : servicioIdAnterior;
        return resultado;
    }

    private bool EsTurnoDiferente(int turnoActual)
    {
        bool resultado = turnoAnterior != turnoActual;
        turnoAnterior = resultado ? turnoActual : turnoAnterior;
        return resultado;
    }



    }

