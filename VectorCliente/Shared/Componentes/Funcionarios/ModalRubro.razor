@inject IJSRuntime js

<SfDialog Width="400px" Target="#target" IsModal="true" @bind-Visible="Visibilidad">
    <DialogTemplates>
        <Header>Nuevo Rubro</Header>
        <Content>
            <div class="form-group">
                <input type="text" @bind="RubroNuevoDTO.Nombre" class="form-control borderActive" placeholder="Nombre de rubro" />
            </div>
            <div class="form-group row justify-content-center">
                <div class="col-4">
                    <input type="text" @bind="RubroNuevoDTO.Grupo" class="form-control borderActive" placeholder="Grupo" />
                </div>
                <div class="col-4">
                    <input type="text" @bind="RubroNuevoDTO.SubGrupo" class="form-control borderActive" placeholder="Subgrupo" />
                </div>
            </div>
            <div class="row justify-content-center">
                <button class="btn btn-primary form-control col-5 mr-2" @onclick="CrearNuevoRubro">Aceptar</button>
                <button class="btn btn-primary form-control col-5 ml-2" @onclick="Cerrar">Cancelar</button>
            </div>
        </Content>
    </DialogTemplates>
    @*<DialogEvents OnOpen="@DialogOpen" Closed="@DialogClose" OnOverlayModalClick="@OverlayClick"></DialogEvents>*@
    <DialogAnimationSettings Effect="@DialogEffect.Fade"></DialogAnimationSettings>
</SfDialog>
<style>
    #target {
        max-height: 800px;
        height: 100%;
    }
</style>
@code {
    [Parameter]
    public bool Visibilidad { get; set; }

    [Parameter]
    public EventCallback<RubroDTO> CrearRubro { get; set; }

    [Parameter]
    public EventCallback CerrarModal { get; set; }

    [Parameter]
    public RubroDTO RubroNuevoDTO { get; set; }

    private async Task CrearNuevoRubro()
    {
        await CrearRubro.InvokeAsync(RubroNuevoDTO);
    }
    private async Task Cerrar()
    {
        await CerrarModal.InvokeAsync();
    }


}